---
# ansible_os_family = dict(
#   RedHat = 'RedHat',
#   Fedora = 'RedHat',
#   CentOS = 'RedHat',
#   Scientific = 'RedHat',
#   SLC = 'RedHat',
#   Ascendos = 'RedHat',
#   CloudLinux = 'RedHat',
#   PSBM = 'RedHat',
#   OracleLinux = 'RedHat',
#   OVS = 'RedHat',
#   OEL = 'RedHat',
#   Amazon = 'RedHat',
#   XenServer = 'RedHat',
#   Ubuntu = 'Debian',
#   Debian = 'Debian',
#   SLES = 'Suse',
#   SLED = 'Suse',
#   OpenSuSE = 'Suse',
#   SuSE = 'Suse',
#   Gentoo = 'Gentoo',
#   Archlinux = 'Archlinux',
#   Mandriva = 'Mandrake',
#   Mandrake = 'Mandrake',
#   Solaris = 'Solaris',
#   Nexenta = 'Solaris',
#   OmniOS = 'Solaris',
#   OpenIndiana = 'Solaris',
#   SmartOS = 'Solaris',
#   AIX = 'AIX',
#   Alpine = 'Alpine',
#   MacOSX = 'Darwin',
#   FreeBSD = 'FreeBSD',
#   HPUX = 'HP-UX'
#)

#- debug: var="{{ item }}"
#  with_items:
#  - ansible_os_family
#  - ansible_distribution
#  - ansible_distribution_major_version
#  - ansible_distribution_release
#  - ansible_distribution_version

# first_found function is broken in 2.8+ https://github.com/ansible/ansible/issues/70772
# can't use this to look for a version of vars files that's specific to version
#- name: Include OS-specific variables from vars/
#  include_vars: "{{ item }}"
#  with_first_found:
#    - "{{ ansible_distribution }}{{ ansible_distribution_major_version }}.yml"
#    - "{{ ansible_os_family }}.yml"
#    - "main.yml"

# 2.8+ this works but {{ ansible_distribution }} does not
- include_vars: "{{ ansible_os_family }}.yml"

# so use OS-specific install tasks instead
- include_tasks: "{{ ansible_distribution }}_tasks.yml"


- name: Check if GitLab configuration file already exists.
  stat: path=/etc/gitlab/gitlab.rb
  register: gitlab_config_file

- name: Check if GitLab is already installed.
  stat: path=/usr/bin/gitlab-ctl
  register: gitlab_file

- name: Download GitLab repository installation script
  get_url:
    url: "{{ gitlab_repo_script_url }}"
    dest: /tmp/gitlab_install_repository.sh
    validate_certs: "{{ gitlab_download_validate_certs }}"
  when: not gitlab_file.stat.exists

- name: Install GitLab repository
  command: bash /tmp/gitlab_install_repository.sh
  args:
    warn: no
  register: gitlab_repo
  when: not gitlab_file.stat.exists
- debug: var=gitlab_repo.stdout_lines

- name: Define the Gitlab package name
  set_fact:
    gitlab_package_name: "{{ gitlab_edition }}{{ gitlab_package_version_separator }}{{ gitlab_version }}"
  when: gitlab_version | default(false)
#- debug: var=gitlab_package_name


- debug: 
    msg: >
      Sometimes the first run fails, but after that, reprovisioning will
      run the chef script and fix problems, so ignore failures on this run
- name: Install GitLab (this will take a while)
  package:
    name: "{{ gitlab_package_name | default(gitlab_edition) }}"
    state: present
  when: not gitlab_file.stat.exists
  register: gitlab_install
  check_mode: yes
- debug: var=gitlab_install

# 'args' is a task keyword, passed at the same level as the module
- name: Reconfigure GitLab with chef (first run)
  command: gitlab-ctl reconfigure
  args:
    warn: false
    creates: /var/opt/gitlab/bootstrapped
  failed_when: false
  register: gitlab_reconfig
  check_mode: yes
#- debug: var=gitlab_reconfig.stdout_lines

- name: Create GitLab SSL configuration folder
  file:
    path: /etc/gitlab/ssl
    state: directory
    owner: root
    group: root
    mode: 0700
  when: gitlab_create_self_signed_cert | bool

- name: Create self-signed certificate.
  command: >
    openssl req -new -nodes -x509 
    -subj "{{ gitlab_self_signed_cert_subj }}"
    -days 3650 -keyout {{ gitlab_ssl_certificate_key }} 
    -out {{ gitlab_ssl_certificate }} -extensions v3_ca
  args:
    warn: false
    creates: "{{ gitlab_ssl_certificate }}"
  when: gitlab_create_self_signed_cert | bool
  register: gitlab_cert
  check_mode: yes
- debug: var=gitlab_cert.stderr_lines

- name: Copy GitLab configuration file
  template:
    src: "{{ gitlab_config_template }}"
    dest: /etc/gitlab/gitlab.rb
    backup: yes
    owner: root
    group: root
    mode: 0600
#  notify: restart gitlab
