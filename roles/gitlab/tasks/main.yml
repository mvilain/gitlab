---
# ansible_os_family = dict(
#   RedHat = 'RedHat',
#   Fedora = 'RedHat',
#   AlmaLinux = 'RedHat',
#   CentOS = 'RedHat',
#   Scientific = 'RedHat',
#   SLC = 'RedHat',
#   Ascendos = 'RedHat',
#   CloudLinux = 'RedHat',
#   PSBM = 'RedHat',
#   OracleLinux = 'RedHat',
#   OVS = 'RedHat',
#   OEL = 'RedHat',
#   Amazon = 'RedHat',
#   XenServer = 'RedHat',
#   Ubuntu = 'Debian',
#   Debian = 'Debian',
#   SLES = 'Suse',
#   SLED = 'Suse',
#   OpenSuSE = 'Suse',
#   SuSE = 'Suse',
#   Gentoo = 'Gentoo',
#   Archlinux = 'Archlinux',
#   Mandriva = 'Mandrake',
#   Mandrake = 'Mandrake',
#   Solaris = 'Solaris',
#   Nexenta = 'Solaris',
#   OmniOS = 'Solaris',
#   OpenIndiana = 'Solaris',
#   SmartOS = 'Solaris',
#   AIX = 'AIX',
#   Alpine = 'Alpine',
#   MacOSX = 'Darwin',
#   FreeBSD = 'FreeBSD',
#   HPUX = 'HP-UX'
#)

#- debug: var="{{ item }}"
#  with_items:
#  - ansible_os_family
#  - ansible_distribution
#  - ansible_distribution_major_version
#  - ansible_distribution_release
#  - ansible_distribution_version

# first_found function is broken in 2.8+ https://github.com/ansible/ansible/issues/70772
# can't use this to look for a version of vars files that's specific to version
#- name: Include OS-specific variables from vars/
#  include_vars: "{{ item }}"
#  with_first_found:
#    - "{{ ansible_distribution }}{{ ansible_distribution_major_version }}.yml"
#    - "{{ ansible_os_family }}.yml"
#    - "main.yml"

# https://gist.github.com/rothgar/8793800
# https://stackoverflow.com/questions/36328907/ansible-get-all-the-ip-addresses-of-a-group
- name: Generate /etc/hosts file
  template:
    src: hosts.j2
    dest: /etc/hosts
    backup: yes
  register: hosts_generated
#- debug: var=hosts_generated

# 2.8+ this works but {{ ansible_distribution }} does not
- include_vars: "{{ ansible_os_family }}.yml"


- name: Check if GitLab configuration file already exists.
  stat: 
    path: /etc/gitlab/gitlab.rb
  register: gitlab_config_file
#- debug: var=gitlab_config_file

- name: Check if GitLab is already installed.
  stat:
    path: /usr/bin/gitlab-ctl
  register: gitlab_file

- name: Download GitLab repository installation script
  get_url:
    url: "{{ gitlab_repo_script_url }}"
    dest: /tmp/gitlab_install_repository.sh
    mode: 0755
    validate_certs: "{{ gitlab_download_validate_certs }}"
  when: not gitlab_file.stat.exists

# this script doesn't support AlmaLinux directly yet 202104.03
# so call the script accordingly with environment variables to force EL8
# os=el dist=8
- name: Install GitLab repository
  command: /tmp/gitlab_install_repository.sh
  args:
    warn: no
  environment:
    os: "el"
    dist: "8"
  register: gitlab_repo
  when:
    - not gitlab_file.stat.exists
    - ansible_facts['distribution'] == "AlmaLinux"

- name: Install GitLab repository
  command: bash /tmp/gitlab_install_repository.sh
  args:
    warn: no
  register: gitlab_repo
  when:
    - not gitlab_file.stat.exists
    - ansible_facts['distribution'] != "AlmaLinux"

- debug: var=gitlab_repo.stdout_lines

- name: Define the Gitlab package name
  set_fact:
    gitlab_package_name: "{{ gitlab_edition }}{{ gitlab_package_version_separator }}{{ gitlab_version }}"
  when: gitlab_version | default(false)
#- debug: var=gitlab_package_name

# be sure to create the /etc/gitlab folder regardless of creating ssl subfolder
- name: Create GitLab SSL configuration folder
  file:
    path: /etc/gitlab/ssl
    state: directory
    owner: root
    group: root
    mode: 0700
#  when: gitlab_create_self_signed_cert | bool

# if you want to override domain from 'gitlab' to something else,
# do it in the playbook with vars section
- name: Copy GitLab configuration file
  template:
    src: "{{ gitlab_config_template }}"
    dest: /etc/gitlab/gitlab.rb
    backup: yes
    owner: root
    group: root
    mode: 0600
  register: gitlab_config_file
#- debug: var=gitlab_config_file

# uses domain variable defaults/main.yml or vars in playbook
- name: Create self-signed certificate.
  command: >
    openssl req -new -nodes -x509 
    -subj "{{ gitlab_self_signed_cert_subj }}" 
    -days 3650 -keyout {{ gitlab_ssl_certificate_key }} 
    -out {{ gitlab_ssl_certificate }} -extensions v3_ca
  args:
    warn: false
    creates: "{{ gitlab_ssl_certificate }}"
  when: gitlab_create_self_signed_cert | bool
  register: gitlab_cert
- debug: var=gitlab_cert.stderr_lines


# NOTE: gitlab package is installed in here because it generates a LOT of output
# as it runs chef as part of the install.  tasks use a shell command with redirect
# to capture the log output for perusal later and copy it to the project directory
#
- include_tasks: "{{ ansible_distribution }}_tasks.yml"

- name: fetch install log
  fetch:
    src: "{{ gitlab_install_log }}"
    dest: "{{ ansible_hostname }}_gitlab-ce-install.log"
    flat: yes
  register: copy_log
- debug: var=copy_log

- name: Reconfigure GitLab to fix any errors from install
  shell: >
    gitlab-ctl reconfigure > "{{ gitlab_reconfig_log }}"
  args:
    warn: false
#    creates: /var/opt/gitlab/bootstrapped
  failed_when: false
  register: gitlab_reconfig
- debug: 
    var: gitlab_reconfig.stderr_lines
  when: gitlab_reconfig|selectattr("stderr_lines", "defined")|list|length >0

- name: fetch reconfig log
  fetch:
    src: "{{ gitlab_reconfig_log }}"
    dest: "{{ ansible_hostname }}_gitlab-ce-reconfig.log"
    flat: yes
  register: gitlab_reconfig
- debug: var=gitlab_reconfig
