---
- assert:
    that: "ansible_distribution_major_version is version_compare('8', '>=')"
    msg: "AlmaLinux version supported"
#- debug: var=ansible_distribution_major_version

- name: install RedHat common packages
  package:
    name: "{{ item }}"
    state: present
  loop:
    - "{{ gitlab_dependencies }}"

- name: install AlmaLinux packages
  package:
    name: "{{ item }}"
    state: present
  loop:
    - policycoreutils

# gitlab_dependencies includes openssh-server and postfix,
# so ensure they're enabled and running
- name: start postfix and sshd
  service:
    name: "{{ item }}"
    enabled: true
    state: started
  loop:
    - postfix
    - sshd

- name: start firewalld
  service:
    name: firewalld
    enabled: true
    state: started

# firewalld has migrated to the community posix collection 
# which can be installed with ansible-galaxy
#    ansible-galaxy collection install ansible.posix
# use command instead even if this isn't idempotent
- name: enable firewalld http and https
  command: firewall-cmd --permanent --add-service="{{ item }}"
  args:
    warn: no
  register: firewall
  loop:
    - http
    - https
#- debug: var=firewall

- name: reload firewalld
  command: firewall-cmd --reload
  args:
    warn: no
  register: reload
#- debug: var=reload

# specifically because AWS sets the hostname to ip-xxx-xxx-xxx-xxx.REGION.compute.internal
- name: setting hostname with hostnamectl
  command: hostnamectl set-hostname "{{ inventory_hostname }}"
  args:
    warn: no
  register: hostname
#- debug: var=hostname

# don't use EXTERNAL_URL environment variable because the ssl certs will be wrong
# set gitlab_domain variable in playbook instead
# this works OK on linode and vagrant boxes but doesn't work well on AWS
#- name: Install GitLab (this will take a while)
#  shell: >
#    dnf install -y "{{ gitlab_package_name | default(gitlab_edition) }}" > \
#    "{{ gitlab_install_log }}"
#  args:
#    warn: false
##    creates: "{{ gitlab_install_log }}"
#  when: not gitlab_file.stat.exists
#  ignore_errors: True
#  register: gitlab_install
##  check_mode: yes
#- debug: 
#    var: gitlab_install.stderr_lines
#  when: gitlab_install|selectattr("stderr_lines", "defined")|list|length >0

- name: Install GitLab (this will take a while)
  package:
    name: "{{ gitlab_package_name | default(gitlab_edition) }}"
    state: present
  when: not gitlab_file.stat.exists
  ignore_errors: True
  register: gitlab_install
#  check_mode: yes
- debug: 
    var: gitlab_install
#  when: gitlab_install|selectattr("stdout_lines", "defined")|list|length >0


